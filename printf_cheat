#!/bin/bash
# shellcheck disable=SC1117
# printf cheat sheet
#+ Format and print text.
sheet() {
  cat << eol
Print a text message:
printf '%s\n' "Hello world"
$(printf '%s\n' "Hello world")

Print an integer in bold blue:
printf '\e[1;34m%.3d\e[0m\n' 42
$(printf '\e[1;34m%.3d\e[0m\n' 42)

Print a float number with the unicode Euro sign:
printf '\u20AC %.2f\n' 123.4
$(printf '\u20AC %.2f\n' 123.4)

Print a text message composed with env vars:
printf 'USER: %s\tHOME: %s\n' "\$USER" "\$HOME"
$(printf 'USER: %s\tHOME: %s\n' "\$USER" "\$HOME")

Store a formatted message in a var (does not work on zsh):
printf -v MYV 'This is %s = %d\n' "a year" 2016; echo "MYV = \${MYV}"
$(printf -v MYV 'This is %s = %d\n' "a year" 2016; echo "MYV = ${MYV}")

printf [-v VAR] FORMAT [...ARGS]
Write the formatted ARGS to the STDOUT under control of FORMAT.

The -v option causes the output to be assigned to the var VAR
rather than being printed to the STDOUT.

When \${#ARGS} > \${#FORMAT}:
FORMAT is recycled to consume all of the ARGS

When \${#ARGS} < \${#FORMAT}:
Extra FORMAT specs behave as 0 or null string

The format is a char string which contains ≥0 of three types of objects:
  plain char: which each are copied as is to STDOUT
  char esc seq: which each are converted and copied to STDOUT
  format spec: which each cause the next of ARGS to be
  copied to STDOUT subject to a conversion spec,
  each of which results in fetching ≥0 subsequent arguments.

Each conversion specification is introduced by the character %, and
ends with a conversion specifier.

In between there may be (in this order):
  ≥0 flags,
  optional minimum field width,
  optional precision,
  optional length modifier

Format specifiers arragned by input arg type

int type:
  d,i: output to signed decimal format.

unsigned int:
  o,u,x,X: output to unsigned (o)ctal,
           (u)nsigned decimal, or unsigned he(xX)adecimal format.

double type
  e,E: rounded output in the style [-]d.ddde±dd
       where d = [0-9], one digit is placed before the decimal
       the right side of ± is its Precision.
       W/o precision in format, it is taken as 6.

  f, F:
  
  g, G:
  

In addition to the standard printf(1) format specifications, printf
interprets the following extensions:
  %b:
    causes printf to expand backslash escape sequences in the corresponding
    arg (except that \c terminates output, backslashes in \', \", and \?
    are not removed, and octal escapes beginning with \0 may contain up to
    four digits).
  %q:
    causes printf to output the corresponding arg in a format that can be
    reused as shell input.
  %(datefmt)T:
    causes printf to output the date-time string resulting from using
    datefmt as a format string for strftime(3). The corresponding arg is
    an integer representing the number of seconds since the epoch. Two
    special arg values may be used: -1 represents the current time, and -2
    represents the time the shell was invoked. If no arg is specified,
    conversion behaves as if -1 had been given. This is an exception to
    the usual printf behavior.

Args to non-string format specifiers are treated as C constants, except
that a leading plus or minus sign is allowed, and if the leading char
is a single or double quote, the value is the ASCII value of the
following char.

Field width:
  An optional non-zero decimal digit string,
  "*": field width is given in the next argument
  "*m\$": field width is given in the decimal integer m-th argument.
large field width may cause padding optionally left or right
small field width never causes truncation of a Field

Precision:

Flag characters: The char % in format string is followed by ≥0 flags
Each flag uniquely applies to each conversion format and are listed by
flag: application definition

  C99 standard flags:
    #: use Alt Form of conversion
      o: make first char of output 0 by prefix if it was not 0 already
      x,X: prepend the string "0x" or "0X" to non-zero output.
      a,A,e,E,f,F: force output to contain a decimal point, even if nothing follows
      g,G: same as prev, but keep trailing zeros in output
    For all other conversion formats Alt Form is undefined

    0: pad with zeros
      d,i,o,u,x,X,a,A,e,E,f,F,g,G: output is padded on the left with zeros not space.
    For all other conversions formats, pad with zero is undefined

    -: left adjust on the field boundary
      output is padded on right with blanks, not on left with blanks or zeros
    A - flag overrides a 0 flag if both are given.

    ' ': A space is placed before positive sign converted number

    +: like prev but a plus is placed, + overrides space

  UNIX standard:
    ': output is grouped with thousands' grouping chars

  glibc 2.2:
    I: output uses the locale's alternative output digits, if any


eol
}
sheet
exit 0
